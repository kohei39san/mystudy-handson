name: Validate OCI Cost Alert Configuration

on:
  pull_request:
    paths:
      - '027.oci-cost-alert/**'
  push:
    paths:
      - '027.oci-cost-alert/**'
    branches:
      - main
      - master

jobs:
  validate-oci-cost-alert:
    name: Validate OCI Cost Alert Configuration
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: 027.oci-cost-alert

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: 027.oci-cost-alert/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('027.oci-cost-alert/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh
          chmod +x tests/*.sh

      - name: Create test terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          # Test configuration for CI/CD
          compartment_id             = "ocid1.compartment.oc1..aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
          alert_email                = "ci-test@example.com"
          budget_amount              = 25
          budget_currency            = "USD"
          alert_threshold_percentage = 80
          budget_display_name        = "CI Test Budget Alert"
          notification_topic_name    = "ci-test-budget-alert-topic"
          freeform_tags = {
            Environment = "ci-test"
            Terraform   = "true"
            CI          = "github-actions"
          }
          EOF

      - name: Terraform Format Check
        run: terraform fmt -check=true -diff=true

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Run Unit Tests
        run: ./tests/unit_test.sh

      - name: Run Integration Tests
        run: ./tests/integration_test.sh

      - name: Run Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: 027.oci-cost-alert
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif
          download_external_modules: true
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/results.sarif
        if: always()

      - name: Generate Summary
        run: |
          echo "## OCI Cost Alert Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ap-osaka-1" >> $GITHUB_STEP_SUMMARY
          echo "- **Provider**: Oracle Cloud Infrastructure (OCI)" >> $GITHUB_STEP_SUMMARY
          echo "- **Resources**: Budget, Alert Rules, Notification Topic, Email Subscription" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Terraform Format Check" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Terraform Validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure actual OCI credentials for deployment" >> $GITHUB_STEP_SUMMARY
          echo "2. Update terraform.tfvars with real compartment OCID and email" >> $GITHUB_STEP_SUMMARY
          echo "3. Run \`terraform apply\` to create resources" >> $GITHUB_STEP_SUMMARY
          echo "4. Confirm email subscription in your inbox" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -f terraform.tfvars
          rm -f terraform.tfplan
          rm -rf .terraform
          rm -f .terraform.lock.hcl