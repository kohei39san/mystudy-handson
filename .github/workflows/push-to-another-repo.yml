name: Push to Another Repository

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to create in target repository'
        required: true
        default: 'update-from-source-repo'
      commit_message:
        description: 'Commit message'
        required: true
        default: 'Update from source repository'
      pr_title:
        description: 'Pull request title'
        required: true
        default: 'Update from source repository'
      pr_body:
        description: 'Pull request body'
        required: false
        default: 'This PR contains updates from the source repository.'

permissions:
  contents: read

jobs:
  push-to-another-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get repository owner
        id: get_owner
        run: |
          # Get the owner of the current repository
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f 1)
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
          echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT

      - name: Validate target repository owner
        id: validate_target_owner
        run: |
          # Get the owner of the target repository
          TARGET_REPO_OWNER=$(echo "${{ secrets.TARGET_REPO }}" | cut -d '/' -f 1)
          
          if [ -z "$TARGET_REPO_OWNER" ]; then
            echo "Error: TARGET_REPO secret is not set or does not contain a valid repository path"
            exit 1
          fi
          
          echo "TARGET_REPO_OWNER=$TARGET_REPO_OWNER" >> $GITHUB_ENV
          echo "target_repo_owner=$TARGET_REPO_OWNER" >> $GITHUB_OUTPUT
          
          # Validate that the target repository is owned by the same owner
          if [ "$REPO_OWNER" != "$TARGET_REPO_OWNER" ]; then
            echo "Error: Target repository must be owned by the same owner ($REPO_OWNER)"
            exit 1
          fi

      - name: Set target repository name
        id: set_target_repo
        run: |
          TARGET_REPO="${{ secrets.TARGET_REPO }}"
          
          if [ -z "$TARGET_REPO" ]; then
            echo "Error: TARGET_REPO secret is not set"
            exit 1
          fi
          
          # Extract just the repo name without owner
          TARGET_REPO_NAME=$(echo "$TARGET_REPO" | cut -d '/' -f 2)
          
          if [ -z "$TARGET_REPO_NAME" ]; then
            echo "Error: Could not extract repository name from TARGET_REPO secret"
            exit 1
          fi
          
          echo "TARGET_REPO=$TARGET_REPO" >> $GITHUB_ENV
          echo "TARGET_REPO_NAME=$TARGET_REPO_NAME" >> $GITHUB_ENV
          echo "target_repo=$TARGET_REPO" >> $GITHUB_OUTPUT
          echo "target_repo_name=$TARGET_REPO_NAME" >> $GITHUB_OUTPUT

      - name: Clone target repository
        run: |
          # Clone the target repository
          git clone "https://x-access-token:${{ secrets.TARGET_REPO_PAT }}@github.com/${{ env.REPO_OWNER }}/${{ env.TARGET_REPO_NAME }}.git" target_repo
          
          # Create and checkout a new branch in the target repository
          cd target_repo
          git checkout -b "${{ inputs.branch_name }}"

      - name: Copy content to target repository
        run: |
          # Copy all files from source repository to target repository
          # excluding the .git directory and the target_repo directory
          rsync -av --exclude='.git/' --exclude='target_repo/' ./ target_repo/

      - name: Commit and push changes to target repository
        run: |
          cd target_repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Add all changes
          git add .
          
          # Commit changes
          git commit -m "${{ inputs.commit_message }}"
          
          # Push changes to the new branch
          git push origin "${{ inputs.branch_name }}"

      - name: Create pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TARGET_REPO_PAT }}
          script: |
            const owner = process.env.REPO_OWNER;
            const repo = process.env.TARGET_REPO_NAME;
            const branch = '${{ inputs.branch_name }}';
            const title = '${{ inputs.pr_title }}';
            const body = '${{ inputs.pr_body }}';
            
            try {
              const response = await github.rest.pulls.create({
                owner: owner,
                repo: repo,
                head: branch,
                base: 'main',
                title: title,
                body: body
              });
              
              console.log(`Pull request created: ${response.data.html_url}`);
            } catch (error) {
              console.error('Error creating pull request:', error);
              core.setFailed('Failed to create pull request');
            }
