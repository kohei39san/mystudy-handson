AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bedrock Agent in Slack Chat Application - Bedrock Resources'

Parameters:
  MainStackName:
    Type: String
    Description: Name of the main CloudFormation stack
    
  BedrockModelId:
    Type: String
    Default: apac.anthropic.claude-3-5-sonnet-20240620-v1:0
    Description: The Bedrock model ID to use for the agent
  
  BedrockOpensearchRoleArn:
    Type: String
    Description: The ARN of the IAM role for Bedrock to access OpenSearch
    Default: "arn:aws:iam::123456789012:role/BedrockOpenSearchRole"

  EmbeddingModelId:
    Type: String
    Default: amazon.titan-embed-text-v1
    Description: The Bedrock embedding model ID to use for the knowledge base
    AllowedValues:
      - amazon.titan-embed-text-v1
      - cohere.embed-english-v3
      - cohere.embed-multilingual-v3

  DomainEndpoint:
    Type: String
    Description: The endpoint of the OpenSearch domain to use for the knowledge base
    Default: "https://search-my-domain-1234567890.us-west-2.es.amazonaws.com"

  OpensearchDomainArn:
    Type: String
    Description: The ARN of the OpenSearch domain to use for the knowledge base
    Default: "arn:aws:es:us-west-2:123456789012:domain/my-domain"

  KnowledgeBaseBucketArn:
    Type: String
    Description: The ARN of the S3 bucket containing the knowledge base data
    Default: "arn:aws:s3:::my-knowledge-base-bucket"

Resources:
  # Bedrock Knowledge Base
  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Sub "${MainStackName}-knowledge-base"
      Description: Knowledge base for Bedrock Agent in Slack
      RoleArn: !Sub "${BedrockOpensearchRoleArn}"
      KnowledgeBaseConfiguration: 
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${EmbeddingModelId}"
      StorageConfiguration:
        Type: OPENSEARCH_MANAGED_CLUSTER
        OpensearchManagedClusterConfiguration:
          DomainArn: !Sub "${OpensearchDomainArn}"
          DomainEndpoint: !Sub "https://${DomainEndpoint}"
          VectorIndexName: bedrock-index
          FieldMapping:
            MetadataField: AMAZON_BEDROCK_METADATA
            TextField: AMAZON_BEDROCK_TEXT_CHUNK
            VectorField: bedrock-vector

  # Bedrock Data Source
  BedrockDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      Name: !Sub "${MainStackName}-s3-data-source"
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: !Ref KnowledgeBaseBucketArn
      KnowledgeBaseId: !Ref BedrockKnowledgeBase
      DataDeletionPolicy: RETAIN

  # Bedrock Agent
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${MainStackName}-agent"
      Description: Bedrock Agent for Slack chat application
      FoundationModel: !Ref BedrockModelId
      Instruction: |
        You are a helpful assistant that answers questions based on the knowledge base.
        Always be polite, concise, and helpful.
        If you don't know the answer, say so clearly and don't make up information.
        Use the knowledge base to provide accurate information.
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      # Using AWS managed key for Bedrock
      # CustomerEncryptionKeyArn: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/bedrock"
      IdleSessionTTLInSeconds: 1800
      ActionGroups: []
      KnowledgeBases:
        - KnowledgeBaseId: !Ref BedrockKnowledgeBase
          Description: Main knowledge base for the agent

  # Bedrock Agent Alias
  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref BedrockAgent
      AgentAliasName: !Sub "${MainStackName}-agent-alias"
      Description: Alias for Bedrock Agent
#      RoutingConfiguration:
#        - AgentVersion: '1'

  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${MainStackName}-BedrockAgentRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref BedrockAgentPolicy

  BedrockAgentPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${MainStackName}-BedrockAgentPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelId}"
          - Effect: Allow
            Action:
              - bedrock:Retrieve
              - bedrock:RetrieveAndGenerate
            Resource: !GetAtt BedrockKnowledgeBase.KnowledgeBaseArn

Outputs:
  BedrockAgentRoleArn:
    Description: ARN of the IAM role for Bedrock Agent
    Value: !GetAtt BedrockAgentRole.Arn
    Export:
      Name: !Sub "${MainStackName}-BedrockAgentRoleArn"

  KnowledgeBaseId:
    Description: Bedrock Knowledge Base ID
    Value: !Ref BedrockKnowledgeBase
    Export:
      Name: !Sub "${MainStackName}-KnowledgeBaseId"

  DataSourceId:
    Description: Bedrock Data Source ID
    Value: !GetAtt BedrockDataSource.DataSourceId
    Export:
      Name: !Sub "${MainStackName}-DataSourceId"

  AgentId:
    Description: Bedrock Agent ID
    Value: !Ref BedrockAgent
    Export:
      Name: !Sub "${MainStackName}-AgentId"

  AgentAliasId:
    Description: Bedrock Agent Alias ID
    Value: !Ref BedrockAgentAlias
    Export:
      Name: !Sub "${MainStackName}-AgentAliasId"
  
  AgentArn:
    Description: Bedrock Agent ARN
    Value: !GetAtt BedrockAgent.AgentArn
    Export:
      Name: !Sub "${MainStackName}-AgentARN"
  
  AliasId:
    Description: Bedrock Agent Alias ID
    Value: !GetAtt BedrockAgentAlias.AgentAliasId
    Export:
      Name: !Sub "${MainStackName}-AliasID"