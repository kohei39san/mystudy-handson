AWSTemplateFormatVersion: '2010-09-09'

Description: Lambda Function Template for GitHub to S3 sync

Parameters:
  MainStackName:
    Type: String
    Description: Name of the main stack to import values

  GitHubRepositoryUrl:
    Type: String
    Description: GitHub repository URL

  GitHubPAT:
    Type: String
    Description: GitHub Personal Access Token
    NoEcho: true

  GitHubUsername:
    Type: String
    Description: GitHub Username
    Default: "x-access-token"

  ScheduleExpression:
    Type: String
    Description: Schedule expression for the EventBridge rule
    Default: 'rate(1 day)'

  KnowledgeBaseBucketArn:
    Type: String
    Description: ARN of the S3 bucket where knowledge base data is stored
    Default: "arn:aws:s3:::knowledge-base-bucket"

  KnowledgeBaseBucketName:
    Type: String
    Description: Name of the S3 bucket where knowledge base data is stored
    Default: "knowledge-base-bucket"

  KnowledgeBaseId:
    Type: String
    Description: ID of the Bedrock knowledge base
    Default: "knowledge-base-id"
    
  DataSourceId:
    Type: String
    Description: ID of the Bedrock data source
    Default: "s3-data-source"

Resources:
  GitHubRepoUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${MainStackName}/github/repo-url"
      Type: String
      Value: !Ref GitHubRepositoryUrl
      Description: GitHub Repository URL

  GitHubPATParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${MainStackName}/github/token"
      Type: String
      Value: !Ref GitHubPAT
      Description: GitHub Personal Access Token
      
  GitHubUsernameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${MainStackName}/github/username"
      Type: String
      Value: !Ref GitHubUsername
      Description: GitHub Username

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "IAMR-${MainStackName}-lambda-execution"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Ref KnowledgeBaseBucketArn
                  - !Sub "${KnowledgeBaseBucketArn}/*"
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${MainStackName}/github/*"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${MainStackName}/github/repo-url"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${MainStackName}/github/token"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${MainStackName}/github/username"
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:StartIngestionJob
                Resource: '*'

  GitHubToS3SyncFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${MainStackName}-github-to-s3-sync"
      Runtime: python3.12
      Handler: github_to_s3_sync.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          
          def lambda_handler(event, context):
              print("This is a placeholder function. The actual code will be updated by Terraform.")
              return {
                  'statusCode': 200,
                  'body': json.dumps('Placeholder function executed successfully')
              }
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref KnowledgeBaseBucketName
          GITHUB_REPO_URL_PARAM: !Ref GitHubRepoUrlParameter
          GITHUB_USERNAME_PARAM: !Ref GitHubUsernameParameter
          GITHUB_TOKEN_PARAM: !Ref GitHubPATParameter
          KNOWLEDGE_BASE_ID: !Ref KnowledgeBaseId
          DATA_SOURCE_ID: !Ref DataSourceId
      MemorySize: 256
      Timeout: 300

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${MainStackName}-github-sync-schedule"
      Description: "Schedule for GitHub to S3 sync Lambda function"
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt GitHubToS3SyncFunction.Arn
          Id: "GitHubToS3SyncTarget"

  # Permission for EventBridge to invoke Lambda
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GitHubToS3SyncFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt GitHubToS3SyncFunction.Arn
  EventBridgeRuleArn:
    Description: ARN of the EventBridge rule
    Value: !GetAtt ScheduledRule.Arn