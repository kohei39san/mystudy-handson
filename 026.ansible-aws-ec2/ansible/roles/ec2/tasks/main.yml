---
# VPC情報取得（削除時に必要）
- name: Get VPC info
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ aws.vpc.name }}"
    region: "{{ aws.common.region }}"
  register: ec2_vpc_info
  when: aws_resource_state == "absent"

- name: Set VPC fact for deletion
  ansible.builtin.set_fact:
    vpc_ec2_vpc_net:
      vpc:
        id: "{{ ec2_vpc_info.vpcs[0].vpc_id }}"
  when: aws_resource_state == "absent" and ec2_vpc_info.vpcs | length > 0

# 削除処理
- name: Delete AWS resources
  ansible.builtin.include_tasks: delete.yml
  when: aws_resource_state == "absent"

# 作成処理
- name: Create EC2 resources
  when: aws_resource_state == "present"
  block:
    # Internet Gateway作成
    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_ec2_vpc_net.vpc.id }}"
        region: "{{ aws.common.region }}"
        state: "{{ aws_resource_state }}"
        tags:
          Name: "{{ aws.ec2.igw.name }}"
      register: ec2_igw

    # Route Table作成（パブリックサブネット用）
    - name: Create public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_ec2_vpc_net.vpc.id }}"
        region: "{{ aws.common.region }}"
        tags:
          Name: "{{ aws.ec2.route_table.public.name }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ ec2_igw.gateway_id }}"
        state: "{{ aws_resource_state }}"
      register: ec2_public_rt

    # パブリックサブネットをルートテーブルに関連付け
    - name: Associate public subnets with route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_ec2_vpc_net.vpc.id }}"
        region: "{{ aws.common.region }}"
        route_table_id: "{{ ec2_public_rt.route_table.id }}"
        lookup: id
        subnets:
          - "{{ vpc_subnets.results[0].subnet.id }}"
          - "{{ vpc_subnets.results[1].subnet.id }}"
        state: "{{ aws_resource_state }}"

    # セキュリティグループ作成
    - name: Create security group for EC2
      amazon.aws.ec2_security_group:
        name: "{{ aws.ec2.security_group.name }}"
        description: "{{ aws.ec2.security_group.description }}"
        vpc_id: "{{ vpc_ec2_vpc_net.vpc.id }}"
        region: "{{ aws.common.region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: SSH access
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: HTTP access
          - proto: tcp
            ports:
              - 443
            cidr_ip: 0.0.0.0/0
            rule_desc: HTTPS access
        tags:
          Name: "{{ aws.ec2.security_group.name }}"
        state: "{{ aws_resource_state }}"
      register: ec2_security_group

    # 最新のAmazon Linux 2 AMI取得
    - name: Get latest Amazon Linux 2 AMI
      amazon.aws.ec2_ami_info:
        region: "{{ aws.common.region }}"
        owners: amazon
        filters:
          name: "amzn2-ami-hvm-*-x86_64-gp2"
          state: available
      register: ec2_ami_info

    # EC2インスタンス作成
    - name: Create EC2 instances
      amazon.aws.ec2_instance:
        name: "{{ item.name }}"
        image_id: "{{ ec2_ami_info.images | sort(attribute='creation_date') | last | json_query('image_id') }}"
        instance_type: "{{ aws.ec2.instance_type }}"
        key_name: "{{ aws.ec2.key_name }}"
        vpc_subnet_id: "{{ item.subnet_id }}"
        security_groups:
          - "{{ ec2_security_group.group_id }}"
        network:
          assign_public_ip: true
        volumes:
          - device_name: /dev/xvda
            ebs:
              volume_type: "{{ aws.ec2.volume.type }}"
              volume_size: "{{ aws.ec2.volume.size }}"
              delete_on_termination: true
        tags: "{{ item.tags }}"
        region: "{{ aws.common.region }}"
        state: "{{ aws_resource_state }}"
      loop:
        - name: "{{ aws.ec2.instances[0].name }}"
          subnet_id: "{{ vpc_subnets.results[0].subnet.id }}"
          tags: "{{ aws.ec2.instances[0].tags }}"
      register: ec2_instances

    # EC2インスタンス情報表示
    - name: Display EC2 instance information
      ansible.builtin.debug:
        msg: |
          Instance Name: {{ item.tags.Name }}
          Instance ID: {{ item.instance_id }}
          Public IP: {{ item.public_ip_address }}
          Private IP: {{ item.private_ip_address }}
          State: {{ item.state.name }}
      loop: "{{ ec2_instances.results[0].instances }}"
      when: ec2_instances.results[0].instances is defined
