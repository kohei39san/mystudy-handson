AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway + Cognito + Lambda payload verification infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: apigateway-userpool-payload-test
    Description: Project name for resource naming
  
  UserEmail:
    Type: String
    Default: test@example.com
    Description: Email address for the Cognito user
  
  LambdaFunctionName:
    Type: String
    Default: payload-logger
    Description: Name of the Lambda function
  
  CognitoUserPoolName:
    Type: String
    Default: payload-verification-pool
    Description: Name of the Cognito User Pool
  
  CognitoUserGroupName:
    Type: String
    Default: api-users
    Description: Name of the Cognito User Group
  
  ApiGatewayName:
    Type: String
    Default: payload-verification-api
    Description: Name of the API Gateway
  
  AllowedIpAddresses:
    Type: CommaDelimitedList
    Default: "0.0.0.0/0"
    Description: List of IP addresses allowed to access the API Gateway

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ProjectName}-${CognitoUserPoolName}-${Environment}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: role
          AttributeDataType: String
          Required: false
          Mutable: true
      LambdaTriggers:
        PreTokenGeneration: !GetAtt CognitoCustomAttributeLambda.Arn
      UserPoolTags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  # Cognito User Pool Client (SPA)
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${ProjectName}-spa-client-${Environment}"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000
      LogoutURLs:
        - http://localhost:3000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Cognito User Pool Domain
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${ProjectName}-${Environment}"
      UserPoolId: !Ref CognitoUserPool

  # IAM Role for Cognito Users
  CognitoUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-cognito-user-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CognitoUserPool
      Policies:
        - PolicyName: CognitoUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*"

  # Cognito User Group
  CognitoUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: !Ref CognitoUserGroupName
      UserPoolId: !Ref CognitoUserPool
      Description: Group for API users
      RoleArn: !GetAtt CognitoUserRole.Arn

  # Cognito User
  CognitoUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Username: !Ref UserEmail
      UserAttributes:
        - Name: email
          Value: !Ref UserEmail
        - Name: email_verified
          Value: "true"
      MessageAction: SUPPRESS

  # Add user to group
  CognitoUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref CognitoUserGroup
      Username: !Ref CognitoUser
      UserPoolId: !Ref CognitoUserPool

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-execution-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # IAM Role for Cognito Custom Attribute Lambda
  CognitoCustomAttributeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-cognito-custom-attribute-lambda-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoCustomAttributePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminGetUser
                Resource: !GetAtt CognitoUserPool.Arn

  # Lambda Function
  PayloadLoggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-${LambdaFunctionName}-${Environment}"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import logging

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """
              Lambda function that logs the entire event payload without modification
              """
              try:
                  # Log the entire event as-is
                  logger.info("=== Lambda Event Payload ===")
                  logger.info(json.dumps(event, indent=2, default=str))
                  
                  # Extract some common fields for easier reading
                  if 'requestContext' in event:
                      logger.info(f"Request ID: {event.get('requestContext', {}).get('requestId', 'N/A')}")
                      logger.info(f"HTTP Method: {event.get('httpMethod', 'N/A')}")
                      logger.info(f"Resource Path: {event.get('resource', 'N/A')}")
                  
                  if 'headers' in event:
                      logger.info("=== Headers ===")
                      logger.info(json.dumps(event['headers'], indent=2))
                  
                  if 'body' in event:
                      logger.info("=== Body ===")
                      logger.info(event['body'])
                  
                  if 'queryStringParameters' in event:
                      logger.info("=== Query Parameters ===")
                      logger.info(json.dumps(event['queryStringParameters'], indent=2))
                  
                  # Return success response
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'message': 'Event logged successfully',
                          'requestId': event.get('requestContext', {}).get('requestId', 'N/A'),
                          'timestamp': context.aws_request_id if context else 'N/A'
                      })
                  }
              
              except Exception as e:
                  logger.error(f"Error processing event: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'error': 'Internal server error',
                          'message': str(e)
                      })
                  }
      Description: Function to log API Gateway event payloads
      Timeout: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Cognito Custom Attribute Lambda Function
  CognitoCustomAttributeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-cognito-custom-attribute-${Environment}"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt CognitoCustomAttributeLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          from botocore.exceptions import ClientError

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize Cognito client
          cognito_client = boto3.client('cognito-idp')

          def lambda_handler(event, context):
              """
              Lambda function triggered by Cognito Pre Token Generation
              Sets custom role attribute based on user group membership
              """
              try:
                  logger.info("=== Cognito Custom Attribute Lambda Triggered ===")
                  logger.info(json.dumps(event, indent=2, default=str))
                  
                  # Extract user pool ID and username from the event
                  user_pool_id = event['userPoolId']
                  username = event['userName']
                  
                  logger.info(f"Processing user: {username} in pool: {user_pool_id}")
                  
                  # Get user's groups
                  try:
                      groups_response = cognito_client.admin_list_groups_for_user(
                          UserPoolId=user_pool_id,
                          Username=username
                      )
                      
                      user_groups = [group['GroupName'] for group in groups_response.get('Groups', [])]
                      logger.info(f"User groups: {user_groups}")
                      
                  except ClientError as e:
                      logger.error(f"Error getting user groups: {str(e)}")
                      user_groups = []
                  
                  # Determine role based on group membership
                  role = "admin" if "api-users" in user_groups else "anonymous"
                  logger.info(f"Determined role: {role}")
                  
                  # Add custom claim to the token
                  if 'response' not in event:
                      event['response'] = {}
                  if 'claimsOverrideDetails' not in event['response']:
                      event['response']['claimsOverrideDetails'] = {}
                  if 'claimsToAddOrOverride' not in event['response']['claimsOverrideDetails']:
                      event['response']['claimsOverrideDetails']['claimsToAddOrOverride'] = {}
                  
                  # Add the role as a custom claim
                  event['response']['claimsOverrideDetails']['claimsToAddOrOverride']['custom:role'] = role
                  
                  # Also update the user's custom attribute for persistence
                  try:
                      cognito_client.admin_update_user_attributes(
                          UserPoolId=user_pool_id,
                          Username=username,
                          UserAttributes=[
                              {
                                  'Name': 'custom:role',
                                  'Value': role
                              }
                          ]
                      )
                      logger.info(f"Successfully updated custom:role attribute to: {role}")
                  except ClientError as e:
                      logger.error(f"Error updating user attributes: {str(e)}")
                      # Don't fail the authentication if attribute update fails
                  
                  logger.info("=== Custom Attribute Processing Complete ===")
                  return event
                  
              except Exception as e:
                  logger.error(f"Unexpected error in Cognito trigger: {str(e)}")
                  # Return the event unchanged to avoid breaking authentication
                  return event
      Description: Function to set custom role attributes based on Cognito group membership
      Timeout: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # API Gateway REST API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ProjectName}-${ApiGatewayName}-${Environment}"
      Description: REST API for payload verification with Cognito authentication
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: 'execute-api:/*/*/*'
            Condition:
              IpAddress:
                aws:SourceIp: !Ref AllowedIpAddresses
          - Effect: Deny
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: 'execute-api:/*/*/*'
            Condition:
              NotIpAddress:
                aws:SourceIp: !Ref AllowedIpAddresses
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Cognito Authorizer for API Gateway
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub "${ProjectName}-cognito-authorizer-${Environment}"
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      IdentitySource: method.request.header.Authorization

  # API Gateway Resource (proxy+)
  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method (ANY)
  ApiGatewayProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PayloadLoggerFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Error
        - StatusCode: 500
          ResponseModels:
            application/json: Error

  # API Gateway Method for root resource (ANY /)
  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PayloadLoggerFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseModels:
            application/json: Error
        - StatusCode: 500
          ResponseModels:
            application/json: Error

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PayloadLoggerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  # Lambda Permission for Cognito to invoke Custom Attribute Lambda
  LambdaCognitoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CognitoCustomAttributeLambda
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayProxyMethod
      - ApiGatewayRootMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  CognitoUserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserPoolId"

  CognitoUserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserPoolClientId"

  CognitoUserPoolDomain:
    Description: Domain of the Cognito User Pool
    Value: !Sub "${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserPoolDomain"

  ApiGatewayUrl:
    Description: URL of the API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayUrl"

  ApiGatewayId:
    Description: ID of the API Gateway
    Value: !Ref ApiGateway
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayId"

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref PayloadLoggerFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionName"

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt PayloadLoggerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"

  CognitoUserArn:
    Description: ARN of the created Cognito user
    Value: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}/user/${CognitoUser}"
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserArn"

  CognitoUserRoleArn:
    Description: ARN of the IAM role for Cognito users
    Value: !GetAtt CognitoUserRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserRoleArn"

  CognitoCustomAttributeLambdaName:
    Description: Name of the Cognito Custom Attribute Lambda function
    Value: !Ref CognitoCustomAttributeLambda
    Export:
      Name: !Sub "${AWS::StackName}-CognitoCustomAttributeLambdaName"

  CognitoCustomAttributeLambdaArn:
    Description: ARN of the Cognito Custom Attribute Lambda function
    Value: !GetAtt CognitoCustomAttributeLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoCustomAttributeLambdaArn"
